'use strict';

var Lab = require('lab');
var lab = exports.lab = Lab.script();
var assert = require('chai').assert;

require('../../../index')();

lab.experiment('object experiments:', function () {

    var target;
    var source;

    lab.before(function (done) {
        done();
    });

    lab.beforeEach(function (done) {
        //reset the test data
        target = {
            abc: {
            }
        };
        source = {
            property1: 'property1value',
            nested: {
                nestedProperty1: 'nestedProperty1value',
                nested2: {
                    nestedProperty2: 'nestedProperty2value'
                }
            },
            date_property1: '2001-01-05T00:00:00Z'
        };
        done();
    });

    lab.experiment('copyProp:', function () {
        lab.test('Simple Property Copy Source path good', function (done) {
            var ret = Object.copyProp(target, 'propertyTarget', source, 'property1');
            assert.equal(ret, true);
            assert.property(target, 'propertyTarget');
            assert.strictEqual(target.propertyTarget, 'property1value');
            done();
        });

        lab.test('Simple Property Copy Source path bad', function (done) {
            var ret = Object.copyProp(target, 'propertyTarget', source, 'wrongpath');
            assert.equal(ret, false);
            assert.notProperty(target, 'propertyTarget');
            done();
        });

        lab.test('Simple Property Copy Source path bad, includeNull=false', function (done) {
            var ret = Object.copyProp(target, 'propertyTarget', source, 'wrongpath', false);
            assert.equal(ret, false);
            assert.notProperty(target, 'propertyTarget');
            done();
        });

        lab.test('Simple Property Copy Source path bad, includeNull=true', function (done) {
            var ret = Object.copyProp(target, 'propertyTarget', source, 'wrongpath', true);
            assert.equal(ret, true);
            assert.property(target, 'propertyTarget');
            assert.isNull(target.propertyTarget);
            done();
        });

        lab.test('Nested Property Copy Source path good', function (done) {
            var ret = Object.copyProp(target, 'xyz', source, 'nested.nestedProperty1');
            assert.equal(ret, true);
            assert.property(target, 'xyz');
            assert.strictEqual(target.xyz, 'nestedProperty1value');
            done();
        });

        lab.test('Nested Property into nested property Copy Source path good', function (done) {
            var ret = Object.copyProp(target.abc, 'blah', source, 'nested.nestedProperty1');
            assert.equal(ret, true);
            assert.property(target.abc, 'blah');
            assert.strictEqual(target.abc.blah, 'nestedProperty1value');
            done();
        });

        lab.test('Property Object Source path good', function (done) {
            var ret = Object.copyProp(target, 'blah', source, 'nested');
            assert.equal(ret, true);
            assert.property(target, 'blah');
            assert.isObject(target.blah);
            assert.property(target.blah, 'nestedProperty1');
            assert.strictEqual(target.blah.nestedProperty1, 'nestedProperty1value');
            done();
        });

        lab.test('Deeper Nested Property into nested property Copy Source path good', function (done) {
            var ret = Object.copyProp(target.abc, 'blah', source, 'nested.nested2.nestedProperty2');
            assert.equal(ret, true);
            assert.property(target.abc, 'blah');
            assert.strictEqual(target.abc.blah, 'nestedProperty2value');
            done();
        });

        lab.test('Transformation Function', function (done) {
            var ret = Object.copyProp(target.abc, 'blah', source, 'date_property1', function(value) {return new Date(value);});
            assert.equal(ret, true);
            assert.property(target.abc, 'blah');
            assert.strictEqual(target.abc.blah.toISOString(), '2001-01-05T00:00:00.000Z');
            done();
        });

        lab.after(function(done) {
            done();
        });
    });
});



