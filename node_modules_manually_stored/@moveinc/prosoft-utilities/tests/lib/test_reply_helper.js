/*eslint no-unused-expressions: "off"*/
'use strict';

var chai = require('chai');
var expect = chai.expect;

var ReplyHelper = require('../../lib/reply-helper');
var lab = exports.lab = require('lab').script();
var describe = lab.experiment;
var it = lab.test;

chai.config.includeStack = true;

describe('ReplyHelper', function() {
    var replyHelper = new ReplyHelper();
    var request = {};

    describe('when calling handleError', function() {
        it('should be able to handle non-error', function(done) {
            var err = new Error('unauthorized');
            err.meta = {
                correlation_id: 'abadd33-33333'
            };

            err.errors = [{
                message: 'some error happened'
            }];

            err.exposed = true;

            var reply = function(data) {
                expect(data).to.have.keys(['meta','status_code']);
                expect(data.status_code).to.equal(500);
                expect(data.meta).to.have.keys([
                    'success',
                    'errors',
                    'correlation_id',
                    'build',
                    'message',
                    'timestamp'
                ]);

                expect(data.meta.correlation_id).to.be.equal(err.meta.correlation_id);
                expect(data.meta.success).to.be.false;
                expect(data.meta.message).to.equal('unauthorized');
                expect(data.meta.errors).to.be.an('array').to.deep.equal(err.errors);

                return {
                    code: function(code) {
                        expect(code).to.equal(500);
                    }
                };
            };

            replyHelper.handleError(request, reply, err);
            done();
        });

        it('should handle when not exposed', function(done) {
            var err = new Error('fake');

            var reply = function(data) {
                expect(data.meta.success).to.be.false;
                expect(data.meta).to.not.have.property('errors');
                expect(data.meta.message).to.be.equal('Internal Server Error');

                return {
                    code: function(code) {
                        expect(code).to.be.equal(500);
                    }
                };
            };

            replyHelper.handleError(request, reply, err);
            done();
        });
    });

    describe('when calling handle', function() {

    });
});
