'use strict';

var Promise = require('bluebird');
var Wreck = require('wreck');
var qs = require('querystring');

require('@moveinc/prosoft-extensions')();

function wreckIt(method, uri, options) {
    options = options || {};
    return new Promise(function (resolve, reject) {
        options.timeout = options.timeout || process.env.HTTP_REQUEST_TIMEOUT || 5000;
        if (typeof options.payload && typeof options.payload === 'object') {
            options.payload = JSON.stringify(options.payload);
        }
        if (options.hasOwnProperty('payload')) {
            options.payload = options.payload.toString();
        }
        var queryString = '';
        if (typeof options.query && typeof options.query === 'object') {
            queryString = qs.stringify(options.query);
            uri += '?' + queryString;
        }
        Wreck.request(method, uri, options, function (error, response) {
            if (error) {
                return reject(error);
            }
            return Wreck.read(response, {
                json: true,
                timeout: options.timeout
            }, function (error, body) {
                if (error) {
                    return reject(error);
                }
                if (Object.getPropertyByPath(body, 'statusCode') && Object.getPropertyByPath(body, 'statusCode') !== 200) {
                    return reject(body);
                }
                if (Object.getPropertyByPath(body, 'status_code') && Object.getPropertyByPath(body, 'status_code') !== 200) {
                    return reject(body);
                }
                if (Object.getPropertyByPath(body, 'meta.success') && Object.getPropertyByPath(body, 'meta.success') === false) {
                    return reject(body);
                }
                return resolve(body);
            });
        });
    });
}

// The options object supports the following optional keys:
// payload - The request body as string, Buffer, or Readable Stream.
// headers - An object containing request headers.
// rejectUnauthorized - TLS flag indicating whether the client should reject a response from a server with invalid certificates. This cannot be set at the same time as the agent option is set.
// redirects - The maximum number of redirects to follow.
// redirected - A callback function that is called when a redirect was triggered, using the signature function (statusCode, location, req) where:
// statusCode - HTTP status code of the response that triggered the redirect.
// location - The redirected location string.
// req - The new ClientRequest object which replaces the one initially returned.
// agent - Node Core http.Agent. Defaults to either wreck.agents.http or wreck.agents.https. Setting to false disables agent pooling.
// timeout - The number of milliseconds to wait without receiving a response before aborting the request. Defaults to unlimited.
// secureProtocol - TLS flag indicating the SSL method to use, e.g. SSLv3_method to force SSL version 3. The possible values depend on your installation of OpenSSL. Read the official OpenSSL docs for possible SSL_METHODS.

module.exports = {
    get: function (uri, options) {
        return wreckIt('GET', uri, options);
    },
    post: function (uri, options) {
        return wreckIt('POST', uri, options);
    },
    put: function (uri, options) {
        return wreckIt('PUT', uri, options);
    },
    patch: function (uri, options) {
        return wreckIt('PATCH', uri, options);
    },
    delete: function (uri, options) {
        return wreckIt('DELETE', uri, options);
    }
};
