'use strict';

var tool = require('cloneextend');
var moment = require('moment');
var formatters = require('./formatters');

require('@moveinc/prosoft-extensions')();

var ReplyHelper = (function () {
    function ReplyHelper(options) {
        this.wrapResponse = true;
        options = options || {};
        this.logger = options.logger || console;
        this.meta = {
            meta: options.meta || {
                build: 'Unknown'
            }
        };
        if (options.wrapResponse === false) {
            this.wrapResponse = false;
        }
    }

    function formatResponseErrorMeta(message, formattedError) {
        // setup the contact error object
        var error = {
            success: false,
            message: message || 'UNKNOWN_ERROR',
            timestamp: new Date(moment.utc().format())
        };
        error.errors = formattedError.errors;
        if (formattedError.stack) {
            error.stack = formattedError.stack;
        }
        return error;
    }

    ReplyHelper.prototype.handleError = function (request, reply, err, code) {
        err = err || new Error('Internal Server Error');
        // if error is exposed move it out
        var exposed = err.exposed === true;
        delete err.exposed;
        // if meta was included move it out
        var errorMeta = err.meta || {};
        // delete err.meta;

        var formattedError = formatters.formatError(err);

        // if there was an error, log the error and add it to meta info
        this.logger.log('error', formattedError);

        var message = 'Internal Server Error';

        var responseMeta = tool.cloneextend(this.meta, {
            meta: errorMeta
        });
        // default meta for error response
        responseMeta = tool.cloneextend(responseMeta, {
            meta: formatResponseErrorMeta(err.message, formattedError),
            status_code: code || 500
        });
        if (!exposed) {
            delete responseMeta.meta.errors;
            responseMeta.meta.message = message;
        }
        var response = reply(responseMeta);
        var ua = Object.getPropertyByPath(request, 'plugins.scooter') || {
            family: 'Other'
        };
        if (ua.family.toLowerCase() !== 'other') {
            response.code(200);
        } else {
            response.code(code || 500);
        }
        return response;
    };

    ReplyHelper.prototype.handle = function (request, reply, data) {
        data = data || {};
        // if meta was included move it out
        var dataMeta = data.meta || {};
        delete data.meta;

        var responseMeta = tool.cloneextend(this.meta, {
            meta: dataMeta
        });

        // default meta for non error response
        responseMeta = tool.cloneextend(responseMeta, {
            meta: {
                success: true,
                timestamp: new Date(moment.utc().format())
            },
            status_code: 200
        });
        // if we have data.meta merge that as well
        // if we have some exra data to respond with, append it to response as a sibling of meta
        if (this.wrapResponse) {
            tool.extend(responseMeta, {
                data: data
            });
        } else {
            tool.extend(responseMeta, data);
        }
        var response = reply(responseMeta);
        response.code(200);
        return response;
    };

    return ReplyHelper;
})();

module.exports = ReplyHelper;
