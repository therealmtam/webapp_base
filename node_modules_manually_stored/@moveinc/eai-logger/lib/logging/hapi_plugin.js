"use strict";

const uuid = require('node-uuid');
const util = require('util');
const Log = require('./log');

/**
 * HapiJS server plugin that will register the logger with
 * the server.
 */
class ServerLogger {

  constructor() {
    this.register = (server, options, next) => {
      this.doRegister(server, options, next);
    };
    this.register.attributes = {
      name: 'APILogger',
      version: '1.0.0'
    };
    this.logger = Log.get();
  }

  doRegister(server, options, next) {
    server.on('request-internal', (request, event, tags) => {
      if (!request.headers['x-rdc-prosoft-correlation-id']) {
        request.headers['x-rdc-prosoft-correlation-id'] = uuid.v4();
      }

      if (tags.debug || tags.info || tags.warn || tags.error) {
        this.doLog(event, tags);
      }
    });

    server.on('request', (request, event, tags) => {
      if (tags.debug || tags.info || tags.warn || tags.error) {
        this.doLog(event, tags);
      }
    });

    server.on('log', (event, tags) => {
      this.doLog(event, tags);
    });

    server.on('internalError', (event, error) => {
      this.logger.log('error', { message: error.message, stack: error.stack });
    });

    server.on("request-error", (event, error) => {
      this.logger.log('error', { message: error.message, stack: error.stack });
    });

    server.on('response', (request) => {
      var access = {
        remote_ip: request.info.remoteAddress,
        method: request.method.toUpperCase(),
        url: request.url.path,
        referer: request.headers.referer || request.headers.referrer || '-',
        http_ver: request.raw.req.httpVersion,
        status: request.response.statusCode,
        response_time: new Date().getTime() - request.info.received + 'ms',
        request_data: request.payload,
        access: true,
      };
      this.logger.log("info", access, request.headers['x-rdc-prosoft-correlation-id']);
    });
    next();
  }

  doLog(event, tags) {
    var data;
    var level = 'info';

    if (tags.error) {
      level = 'error';
    }
    else if (tags.warn) {
      level = 'warn';
    }
    else if (tags.info) {
      level = 'info';
    }
    else if (tags.debug) {
      level = 'debug';
    }

    event.tags = event.tags.filter(function (tag) {
      return !~['error', 'warn', 'info', 'debug'].indexOf(tag);
    });

    if (tags.hapi && tags.error && event.data && event.data.msec) {
      return; // ignore internal hapi messages
    }
    if (tags.hapi && tags.error && tags.unauthenticated) {
      return;
    }

    data = util.format(event.data);
    this.logger.log(level, data);
  }
}

module.exports = ServerLogger;
