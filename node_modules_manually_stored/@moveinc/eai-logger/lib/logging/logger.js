"use strict";

const moment = require('moment');

/**
 * Basic logging class that formats the given message and
 * provides it to the underlying logger implementation.
 */
class Logger {

  /**
   *
   * @param {Log} logger The base logger implementation
   * @param {string} moduleName The module name
   * @param {string} loggingIndex The logging index
   * @param {string} packageName The package name of this logger
   */
  constructor(logger, moduleName, loggingIndex, packageName) {
    this.logger = logger;
    this.module_name = moduleName;
    this.logging_index = loggingIndex;
    this.package_name = packageName;
  }

  /**
   * Logs a message at the given level with the given correlation id (optional)
   * @param {string} level The log level (debug, info, warn, error)
   * @param {string} message
   * @param {string} correlationId
   */
  log(level, message, correlationId) {

    let item = {};

    if (!message) {
      message = '<empty log message>';
    }

    if (typeof (message) === 'string') {
      item.message = message;
    }
    else if (message.message && message.stack) {
      // Error Details
      item = { message: message.message, stack: message.stack };
    }
    else {
      item = Object.assign({}, message);
    }

    let entry = {};
    entry.timestamp = moment.utc(moment()).toISOString();
    entry.message = {};
    entry.message.level = level;
    entry.message.data = item;
    entry.message.correlation_id = message.correlation_id || correlationId || 'UNTRACKED';
    entry.message.module = this.module_name;
    entry.options = {};
    entry.options._logging_index = this.logging_index;
    entry.options.type = this.package_name;

    this.logger[level](JSON.stringify(entry));
  }
}

module.exports = Logger;
