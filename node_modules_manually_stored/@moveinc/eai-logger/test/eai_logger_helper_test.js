/*
 Name:       test/helpers/eai_logger_helper_test.js
 Purpose:    Lab test file for testing EAI Logger
 Author:     James Monsebroten

 Created:    2016-03-18

 Update History:
 Date        Developer         Update Details
 --------------------------------------------------------------------------------
 2017-05-30  Jason Chan        Renamed test file to represent as unit test.
 */
'use strict';
// assertion library
const Code = require('code');
const expect = Code.expect;
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const moment = require('moment');
const sinon = require('sinon');
const util = require('util');

var eaiLogger = require('../lib').EAILogger;
var HapiPlugin = require('../lib').HapiPlugin;
var _ = require('lodash');
var utilities = require('@moveinc/prosoft-utilities');
var test_correlation_id = 'test_correlation_id';
var undefined_variable;
var date_regex = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/;

// initialize some logging variables
process.env.TIMING_AS_DEBUGPOINT = 'true';
process.env.SUPRESS_TIMING = 'false';
process.env.SUPRESS_DEBUG_POINT = 'false';
process.env.SUPRESS_LOGGING = 'false';

var SKIP = false;

// start of internal functions
var internalTests_options = {
    skip: SKIP
};
var getMethodDetailsObject_options = {
    skip: SKIP
};
var debugPoint_Output_options = {
    skip: SKIP
};
var validateCorrelationId_options = {
    skip: SKIP
};
var formatError_options = {
    skip: SKIP
};
var logPassthrough_options = {
    skip: SKIP
};

// start of external functions
var externalTests_options = {
    skip: SKIP
};
var debugPoint_options = {
    skip: SKIP
};
var logMethodDetail_options = {
    skip: SKIP
};
var logTiming_options = {
    skip: SKIP
};
var logValidationError_options = {
    skip: SKIP
};
var log_options = {
    skip: SKIP
};

var hapijsPlugin_options = {
    skip: false
};

// usage tests
var extraFunctionalTests_options = {
    skip: SKIP
};

lab.experiment('Helper File Tests: eai_logger_helper.js', function () {
    lab.experiment('internalFunctions tests', internalTests_options, function () {
        lab.experiment('validateCorrelationId tests', validateCorrelationId_options, function () {
            lab.test('full tests', function (done) {
                var default_value_used = 'INVALID_CORRELATION_ID';
                expect(eaiLogger._internalFunctions.validateCorrelationId()).to.equal(default_value_used);
                expect(eaiLogger._internalFunctions.validateCorrelationId(1)).to.equal(default_value_used);
                expect(eaiLogger._internalFunctions.validateCorrelationId(true)).to.equal(default_value_used);
                expect(eaiLogger._internalFunctions.validateCorrelationId({})).to.equal(default_value_used);
                expect(eaiLogger._internalFunctions.validateCorrelationId([])).to.equal(default_value_used);
                expect(eaiLogger._internalFunctions.validateCorrelationId('correlation_id_1')).to.equal('correlation_id_1');
                done();
            });
        });
        lab.experiment('logPassthrough tests', logPassthrough_options, function () {
            lab.beforeEach(function (done) {
                sinon.spy(eaiLogger._internalFunctions, 'validateCorrelationId');
                done();
            });
            lab.afterEach(function (done) {
                if (eaiLogger._internalFunctions.validateCorrelationId.restore) {
                    eaiLogger._internalFunctions.validateCorrelationId.restore();
                }

                done();
            });
            lab.test('full test', function (done) {
                eaiLogger._internalFunctions.logPassthrough();
                expect(eaiLogger._internalFunctions.validateCorrelationId.calledOnce).to.be.true();
                done();
            });
        });
        lab.experiment('formatError test', formatError_options, function () {
            var default_error_object = {};
            lab.experiment('invalid parameters', function () {
                lab.test('nothing passed', function (done) {
                    var error = eaiLogger._internalFunctions.formatError();
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
                lab.test('number passed', function (done) {
                    var error = eaiLogger._internalFunctions.formatError(1);
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
                lab.test('string passed', function (done) {
                    var error = eaiLogger._internalFunctions.formatError('apple');
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
                lab.test('array of numbers passed', function (done) {
                    var error = eaiLogger._internalFunctions.formatError([1]);
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
                lab.test('array of empty objects passed', function (done) {
                    var error = eaiLogger._internalFunctions.formatError([{
                        apple: true
                    }]);
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
                lab.test('empty object passed', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({});
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
            });
            lab.experiment('valid parameters', function () {
                lab.test('object with message (string) only', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        message: 'this is my message'
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        message: 'this is my message'
                    });
                    done();
                });
                lab.test('object with message (string) and other value', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        message: 'this is my message',
                        code: 201
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        message: 'this is my message',
                        errors: [{
                            message: 'this is my message',
                            code: 201
                        }]
                    });
                    done();
                });
                lab.test('object errors array (1 value) with message (number)', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        errors: [{
                            message: 5
                        }]
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        errors: [{
                            message: 5
                        }]
                    });
                    done();
                });
                lab.test('object errors array (1 value) with message (string)', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        errors: [{
                            message: 'this is my message'
                        }]
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        message: 'this is my message'
                    });
                    done();
                });
                lab.test('object errors array (1 value) with code (int)', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        errors: [{
                            code: 200
                        }]
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        errors: [{
                            code: 200
                        }]
                    });
                    done();
                });
                lab.test('object errors array (1 value) empty object', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        errors: [{}]
                    });
                    expect(error).to.be.an.object().and.to.equal(default_error_object);
                    done();
                });
                lab.test('object errors array (1 value) with message (string) and other value', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        errors: [{
                            message: 'this is my message',
                            code: 201
                        }]
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        message: 'this is my message',
                        errors: [{
                            message: 'this is my message',
                            code: 201
                        }]
                    });
                    done();
                });
                lab.test('object errors array (2 values) with message (string) and other value', function (done) {
                    var error = eaiLogger._internalFunctions.formatError({
                        errors: [{
                            message: 'this is my message',
                            code: 201
                        }, {
                            message: 'this is my message II',
                            code: 202
                        }]
                    });
                    expect(error).to.be.an.object().and.to.equal({
                        errors: [{
                            message: 'this is my message',
                            code: 201
                        }, {
                            message: 'this is my message II',
                            code: 202
                        }]
                    });
                    done();
                });
            });
            lab.experiment('error cases', function () {
                var formatError;
                var validation = function (done, passed_value, internal_function_return, expected_output) {
                    expected_output = expected_output ? expected_output : internal_function_return;
                    var returned_value = eaiLogger._internalFunctions.formatError(passed_value);
                    expect(formatError.calledOnce, 'formatError.calledOnce').to.be.true();
                    expect(formatError.getCall(0).args[0], 'formatError.getCall(0).args[0]').to.equal(passed_value);
                    expect(formatError.getCall(0).returnValue, 'formatError.getCall(0).returnValue').to.equal(internal_function_return);
                    expect(returned_value, 'returned_value').to.equal(expected_output);
                    done();
                };
                lab.beforeEach(function (done) {
                    formatError = sinon.stub(utilities.formatters, 'formatError');
                    formatError.withArgs({
                        error_test: 1
                    }).returns(null);
                    formatError.withArgs({
                        error_test: 2
                    }).returns({});
                    formatError.withArgs({
                        error_test: 3
                    }).returns({
                        errors: []
                    });
                    formatError.withArgs({
                        error_test: 4
                    }).returns({
                        errors: 1
                    });
                    done();

                });
                lab.afterEach(function (done) {
                    if (formatError && formatError.restore) {
                        formatError.restore();
                    }
                    done();
                });
                lab.test('formatters.formatError returns null', function (done) {
                    var passed_value = {
                        error_test: 1
                    };
                    var internal_function_return = null;
                    validation(done, passed_value, internal_function_return);
                });
                lab.test('formatters.formatError returns empty object', function (done) {
                    var passed_value = {
                        error_test: 2
                    };
                    var internal_function_return = {};
                    var final_reulst = {};
                    validation(done, passed_value, internal_function_return, final_reulst);
                });
                lab.test('formatters.formatError returns object with errors (empty array)', function (done) {
                    var passed_value = {
                        error_test: 3
                    };
                    var internal_function_return = {
                        errors: []
                    };
                    validation(done, passed_value, internal_function_return);
                });
                lab.test('formatters.formatError returns object with errors (number)', function (done) {
                    var passed_value = {
                        error_test: 4
                    };
                    var internal_function_return = {
                        errors: 1
                    };
                    validation(done, passed_value, internal_function_return);
                });
            });
        });
        lab.experiment('log test', log_options, function () {
            var empty_detail = {
                'message': '',
                'detail': {}
            };
            lab.beforeEach(function (done) {
                sinon.spy(eaiLogger._internalFunctions, 'logPassthrough');
                done();
            });
            lab.afterEach(function (done) {
                eaiLogger._internalFunctions.logPassthrough.restore();
                done();
            });

            var validation = function (done, log_level, detail, correlation_id, message, expected_detail) {
                eaiLogger.log(log_level, detail, correlation_id, message);
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce, 'eaiLogger._internalFunctions.logPassthrough.calledOnce').to.be.true();

                if (log_level !== null && typeof log_level !== 'undefined') {
                    expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0], 'logged log_level').to.be.a.string().and.to.equal(log_level);
                }
                else {
                    if (log_level === null) {
                        expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0], 'logged log_level').to.be.null();
                    }
                    else {
                        expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0], 'logged log_level').to.be.undefined();
                    }

                }
                expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[1], 'logged details').to.be.an.object().and.to.equal(expected_detail);
                if (correlation_id !== null && typeof correlation_id !== 'undefined') {
                    expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[2], 'logged correlation_id').to.be.a.string().and.to.equal(correlation_id);
                }
                else {
                    if (correlation_id === null) {
                        expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[2], 'logged correlation_id').to.be.null();
                    }
                    else {
                        expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[2], 'logged correlation_id').to.be.undefined();

                    }
                }
                done();
            };

            lab.experiment('invalid parameters', function () {
                lab.test('no parameters', function (done) {
                    validation(done, undefined_variable, undefined_variable, undefined_variable, undefined_variable, empty_detail);
                });
                lab.test('null parameters', function (done) {
                    validation(done, null, null, null, null, empty_detail);
                });
                lab.test('log level, but no details', function (done) {
                    validation(done, 'info', undefined_variable, undefined_variable, undefined_variable, empty_detail);
                });
            });
            lab.experiment('valid parameters', function () {
                lab.test('details (empty object), no message', function (done) {
                    validation(done, 'info', {}, test_correlation_id, undefined_variable, {});
                });
                lab.test('details (string), no message', function (done) {
                    validation(done, 'info', 'details', test_correlation_id, undefined_variable, {
                        'message': '',
                        'detail': {
                            'string': 'details'
                        }
                    });
                });
                lab.test('details (number: positive), no message', function (done) {
                    validation(done, 'info', 1, test_correlation_id, undefined_variable, {
                        'message': '',
                        'detail': {
                            'number': 1
                        }
                    });
                });
                lab.test('details (number: 0), no message', function (done) {
                    validation(done, 'info', 0, test_correlation_id, undefined_variable, {
                        'message': '',
                        'detail': {
                            'number': 0
                        }
                    });
                });
                lab.test('details (number: negative), no message', function (done) {
                    validation(done, 'info', -1, test_correlation_id, undefined_variable, {
                        'message': '',
                        'detail': {
                            'number': -1
                        }
                    });
                });
                lab.test('details (boolean: false), no message', function (done) {
                    validation(done, 'info', false, test_correlation_id, undefined_variable, {
                        'message': '',
                        'detail': {
                            'boolean': false
                        }
                    });
                });
                lab.test('details (boolean: true), no message', function (done) {
                    validation(done, 'info', true, test_correlation_id, undefined_variable, {
                        'message': '',
                        'detail': {
                            'boolean': true
                        }
                    });
                });
                lab.test('details (empty object), message (string)', function (done) {
                    validation(done, 'info', {}, test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {}
                    });
                });
                lab.test('details (string), message (string)', function (done) {
                    validation(done, 'info', 'details', test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {
                            'string': 'details'
                        }
                    });
                });
                lab.test('details (number: positive), message (string)', function (done) {
                    validation(done, 'info', 1, test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {
                            'number': 1
                        }
                    });
                });
                lab.test('details (number: 0), message (string)', function (done) {
                    validation(done, 'info', 0, test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {
                            'number': 0
                        }
                    });
                });
                lab.test('details (number: negative), message (string)', function (done) {
                    validation(done, 'info', -1, test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {
                            'number': -1
                        }
                    });
                });
                lab.test('details (boolean: false), message (string)', function (done) {
                    validation(done, 'info', false, test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {
                            'boolean': false
                        }
                    });
                });
                lab.test('details (boolean: true), message (string)', function (done) {
                    validation(done, 'info', true, test_correlation_id, 'test messsage', {
                        'message': 'test messsage',
                        'detail': {
                            'boolean': true
                        }
                    });
                });
                lab.test('details (object with correlation_id (undefined)), message (string)', function (done) {
                    var detail = {
                        correlation_id: undefined_variable
                    };
                    var expected_result = {
                        'message': 'test messsage',
                        'detail': {
                            correlation_id: undefined_variable
                        }
                    };
                    validation(done, 'info', detail, test_correlation_id, 'test messsage', expected_result);
                });
                lab.test('details (object with correlation_id (null)), message (string)', function (done) {
                    var detail = {
                        correlation_id: null
                    };
                    var expected_result = {
                        'message': 'test messsage',
                        'detail': {
                            correlation_id: null
                        }
                    };
                    validation(done, 'info', detail, test_correlation_id, 'test messsage', expected_result);
                });
                lab.test('details (object with correlation_id (string)), message (string)', function (done) {
                    var detail = {
                        correlation_id: test_correlation_id
                    };
                    var expected_result = {
                        'message': 'test messsage',
                        'detail': {
                            'correlation_id': test_correlation_id
                        },
                        correlation_id: test_correlation_id
                    };
                    validation(done, 'info', detail, test_correlation_id, 'test messsage', expected_result);
                });

            });
        });
        lab.experiment('debugPoint_Output tests', debugPoint_Output_options, function () {
            var validation = function (done, passed_header, passed_message, passed_footer, recursion_value) {
                var spaces = '';
                if (recursion_value) {
                    spaces = Array(recursion_value * 3 + 1).join(' ');
                }
                var expeted_header = spaces + passed_header;
                var expeted_message;
                var expeted_footer = spaces + passed_footer;

                if (_.isPlainObject(passed_message)) {
                    expeted_message = util.inspect(passed_message, false, null);
                }
                else {
                    expeted_message = spaces + passed_message;
                }

                eaiLogger._internalFunctions.debugPoint_Output(passed_header, passed_message, passed_footer, recursion_value);
                expect(console.log.calledThrice, 'console.log.calledThrice').to.be.true();
                expect(console.log.getCall(0).args[0], 'top_line').to.equal(expeted_header);
                expect(console.log.getCall(1).args[0], 'message').to.equal(expeted_message);
                expect(console.log.getCall(2).args[0], 'bottom_line').to.equal(expeted_footer);
                done();
            };

            lab.beforeEach(function (done) {
                sinon.spy(console, 'log');
                done();
            });
            lab.afterEach(function (done) {
                console.log.restore();
                done();
            });
            lab.test('invalid parameters - no values passed', function (done) {
                eaiLogger._internalFunctions.debugPoint_Output();
                var spaces = '';
                expect(console.log.calledThrice, 'console.log.calledThrice').to.be.true();
                expect(console.log.getCall(0).args[0], 'top_line').to.equal(spaces);
                expect(console.log.getCall(1).args[0], 'message').to.equal(spaces);
                expect(console.log.getCall(2).args[0], 'bottom_line').to.equal(spaces);
                done();
            });
            lab.test('Valid parameters (no recursion) - verify they get outputted', function (done) {
                return validation(done, 'header', 'message string', 'footer');
            });
            lab.test('Valid parameters (1st recursion) - verify they get outputted', function (done) {
                return validation(done, 'header', 'message string', 'footer', 1);
            });
            lab.test('Valid parameters (2nd recursion) - verify they get outputted', function (done) {
                return validation(done, 'header', 'message string', 'footer', 2);
            });

            lab.test('Valid parameters (with object message) - verify they get outputted', function (done) {
                var message = {
                    test: true
                };
                return validation(done, 'header', message, 'footer');
            });
            lab.test('Valid parameters (with deep object message) - verify they get outputted', function (done) {
                var message = {
                    test: {
                        inner_test: {
                            innermost_test1: true,
                            innermost_test2: true,
                            innermost_test3: true,
                            innermost_test4: true,
                            innermost_test5: true,
                            innermost_test6: true
                        }
                    }
                };

                return validation(done, 'header', message, 'footer');
            });
        });

        lab.experiment('getMethodDetailsObject tests', getMethodDetailsObject_options, function () {
            var validation = function (done, method_name, log_point, file_name, start_time) {
                var method_name_to_pass = method_name;
                if (typeof method_name_to_pass !== 'undefined' && method_name_to_pass !== null && typeof file_name !== 'undefined' && file_name !== null) {
                    method_name_to_pass = file_name + '.' + method_name;
                }
                var results = eaiLogger._internalFunctions.getMethodDetailsObject(method_name_to_pass, log_point, start_time);
                if (typeof method_name === 'undefined' || method_name === null) {
                    method_name = 'unspecified';
                }
                if (typeof log_point === 'undefined' || log_point === null) {
                    log_point = 'unspecified';
                }
                expect(results, 'results').to.be.an.object();
                if (typeof method_name_to_pass !== 'undefined' && method_name_to_pass !== null && typeof file_name !== 'undefined' && file_name !== null) {
                    expect(results.file, 'file').to.equal('the_file');
                }
                else {
                    expect(results.file, 'file').to.be.undefined();
                }
                expect(results.method_name, 'method_name').to.equal(method_name);
                expect(results.log_point, 'log_point').to.equal(log_point);
                expect(results.timing, 'timing object').to.be.an.object();
                expect(results.timing.start_time, 'start_time').to.be.a.string();
                if (start_time === null || typeof start_time === 'undefined') {
                    expect(results.timing.end_time, 'end_time').to.be.undefined();
                    expect(results.timing.elapsed_time, 'elapsed_time').to.be.undefined();
                }
                else {
                    if (typeof start_time === 'string' && start_time.match(date_regex)) {
                        expect(results.timing.start_time, 'start_time').to.be.a.string().and.to.equal(start_time);
                    }
                    else if (start_time.toISOString) {
                        expect(results.timing.start_time, 'start_time').to.be.a.string().and.to.equal(start_time.toISOString());
                    }
                    else {
                        expect(results.timing.start_time, 'start_time').to.be.a.string().and.to.match(date_regex);
                    }
                    expect(results.timing.end_time, 'end_time').to.be.a.string();
                    expect(results.timing.elapsed_time, 'end_time').to.be.a.number();
                }
                done();
            };
            lab.experiment('invalid parameters', function () {
                lab.test('no parameters passed', function (done) {
                    validation(done);
                });
                lab.test('method_name passed, but no log_point', function (done) {
                    validation(done, 'the_name');
                });

                lab.test('method_name passed, log_point, start_time (number)', function (done) {
                    validation(done, 'the_name', 'log_time', undefined_variable, 5);
                });
                lab.test('method_name passed, log_point, start_time (string: non-date)', function (done) {
                    validation(done, 'the_name', 'log_time', undefined_variable, 'this is a string');
                });
            });
            lab.experiment('valid parameters', function () {
                lab.test('method_name passed and log_point, but no start_time', function (done) {
                    validation(done, 'the_name', 'the_log_point');
                });
                lab.test('method_name passed (with one .) and log_point, but no start_time', function (done) {
                    validation(done, 'the_name', 'the_log_point', 'the_file');
                });
                lab.test('method_name passed (with two .s) and log_point, but no start_time', function (done) {
                    validation(done, 'the_name.sub_stuff', 'the_log_point', 'the_file');
                });
                lab.test('method_name passed (with two .s) and log_point, start_time (2017-05-22T04:30:43.037Z)', function (done) {
                    validation(done, 'the_name.sub_stuff', 'the_log_point', 'the_file', '2017-05-22T04:30:43.037Z');
                });
                lab.test('method_name passed (with two .s) and log_point, start_time (new moment)', function (done) {
                    validation(done, 'the_name.sub_stuff', 'the_log_point', 'the_file', moment());
                });
            });
        });
    });

    lab.experiment('externalFunction tests', externalTests_options, function () {

        lab.experiment('logMethodDetail tests', logMethodDetail_options, function () {
            lab.beforeEach(function (done) {
                sinon.spy(eaiLogger._internalFunctions, 'logPassthrough');
                sinon.spy(eaiLogger, 'debugPoint');
                sinon.spy(eaiLogger._internalFunctions, 'getMethodDetailsObject');
                done();
            });
            lab.afterEach(function (done) {
                eaiLogger._internalFunctions.logPassthrough.restore();
                eaiLogger.debugPoint.restore();
                eaiLogger._internalFunctions.getMethodDetailsObject.restore();
                done();
            });

            lab.test('invalid parameters - no values passed', function (done) {
                var start_time = eaiLogger.logMethodDetail();
                expect(start_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                done();
            });
            lab.test('method_name and no method_parameters', function (done) {
                var start_time = eaiLogger.logMethodDetail('test_name');
                expect(start_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                done();
            });
            lab.test('method_name and method_parameters', function (done) {
                var start_time = eaiLogger.logMethodDetail('test_name', {
                    apple: true
                });
                expect(start_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                done();
            });
            lab.test('method_name and method_parameters, suppress timing', function (done) {
                process.env.SUPRESS_TIMING = 'true';
                var start_time = eaiLogger.logMethodDetail('test_name', {
                    apple: true
                });
                process.env.SUPRESS_TIMING = 'false';
                expect(start_time).to.be.null();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.false();
                done();
            });
            lab.test('method_name and method_parameters, timing as debug = false', function (done) {
                process.env.TIMING_AS_DEBUGPOINT = 'false';
                var start_time = eaiLogger.logMethodDetail('test_name', {
                    apple: true
                });
                process.env.TIMING_AS_DEBUGPOINT = 'true';
                expect(start_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.true();
                expect(eaiLogger.debugPoint.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                done();
            });
            lab.test('method_name and method_parameters, log_level = debug', function (done) {
                var start_time = eaiLogger.logMethodDetail('test_name', {
                    apple: true
                }, '', 'debug');

                expect(start_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                done();
            });
        });

        lab.experiment('logTiming tests', logTiming_options, function () {
            lab.beforeEach(function (done) {
                sinon.spy(eaiLogger._internalFunctions, 'logPassthrough');
                sinon.spy(eaiLogger, 'debugPoint');
                sinon.spy(eaiLogger._internalFunctions, 'getMethodDetailsObject');
                sinon.spy(eaiLogger._internalFunctions, 'formatError');
                done();
            });
            lab.afterEach(function (done) {
                eaiLogger._internalFunctions.logPassthrough.restore();
                eaiLogger.debugPoint.restore();
                eaiLogger._internalFunctions.getMethodDetailsObject.restore();
                eaiLogger._internalFunctions.formatError.restore();
                done();
            });

            lab.test('invalid parameters - no values passed', function (done) {
                var end_time = eaiLogger.logTiming();
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                done();
            });

            lab.test('method_name, log_point, missing start_time', function (done) {
                var end_time = eaiLogger.logTiming('method_name', 'log_point');
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                done();
            });

            lab.test('method_name, log_point, start_time, correlation_id', function (done) {
                var end_time = eaiLogger.logTiming('method_name', 'log_point', '2017-05-23T05:56:56.742Z', 'correlation_id_to_use');
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                done();
            });

            lab.test('method_name, log_point, start_time, correlation_id, message, NO message_type', function (done) {
                var end_time = eaiLogger.logTiming('method_name', 'log_point', '2017-05-23T05:56:56.742Z', 'correlation_id_to_use', 'my_message');
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.true();
                done();
            });

            lab.test('method_name, log_point, start_time, correlation_id, message, message_type (error)', function (done) {
                var end_time = eaiLogger.logTiming('method_name', 'log_point', '2017-05-23T05:56:56.742Z', 'correlation_id_to_use', 'my_message', 'error');
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.true();
                done();
            });
            lab.test('method_name, log_point, start_time, correlation_id, message, message_type (non-error)', function (done) {
                var end_time = eaiLogger.logTiming('method_name', 'log_point', '2017-05-23T05:56:56.742Z', 'correlation_id_to_use', 'my_message', 'my_message_type');
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                done();
            });
            lab.test('method_name, log_point, start_time, correlation_id, message, message_type (non-error), suppress timing', function (done) {
                process.env.SUPRESS_TIMING = 'true';
                var end_time = eaiLogger.logTiming('method_name', 'log_point', '2017-05-23T05:56:56.742Z', 'correlation_id_to_use', 'my_message', 'my_message_type');
                process.env.SUPRESS_TIMING = 'false';
                expect(end_time).to.be.null();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.false();
                expect(eaiLogger.debugPoint.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                done();
            });
            lab.test('method_name, log_point, start_time (crrent time), correlation_id, message, message_type (non-error), timing as debug = false', function (done) {
                process.env.TIMING_AS_DEBUGPOINT = 'false';
                var end_time = eaiLogger.logTiming('method_name', 'log_point', moment().toISOString(), 'correlation_id_to_use', 'my_message', 'my_message_type');
                process.env.TIMING_AS_DEBUGPOINT = 'true';
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.true();
                expect(eaiLogger.debugPoint.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0]).to.equal('debug');
                done();
            });
            lab.test('method_name, log_point, start_time, correlation_id, message, message_type (non-error), timing as debug = false', function (done) {
                process.env.TIMING_AS_DEBUGPOINT = 'false';
                var end_time = eaiLogger.logTiming('method_name', 'log_point', '2017-05-23T05:56:56.742Z', 'correlation_id_to_use', 'my_message', 'my_message_type');
                process.env.TIMING_AS_DEBUGPOINT = 'true';
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.true();
                expect(eaiLogger.debugPoint.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0]).to.equal('warn');
                done();
            });
            lab.test('method_name, log_point, start_time, correlation_id, message, message_type (non-error), log_level = info, timing as debug = false', function (done) {
                process.env.TIMING_AS_DEBUGPOINT = 'false';
                var end_time = eaiLogger.logTiming('method_name', 'log_point', moment().toISOString(), 'correlation_id_to_use', 'my_message', 'my_message_type', 'info');
                process.env.TIMING_AS_DEBUGPOINT = 'true';
                expect(end_time).to.be.a.string();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce).to.be.true();
                expect(eaiLogger.debugPoint.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.getMethodDetailsObject.calledOnce).to.be.true();
                expect(eaiLogger._internalFunctions.formatError.calledOnce).to.be.false();
                expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0]).to.equal('info');
                done();
            });
        });

        lab.experiment('debugPoint tests', debugPoint_options, function () {
            var default_line = Array(81).join('-');
            var validation = function (done, top_line_regex, message, bottom_line, message_to_pass, header_to_pass, separator_line_character_to_pass, line_length_to_pass, center_header_to_pass, recursive_attempt_to_pass) {
                eaiLogger.debugPoint(message_to_pass, header_to_pass, separator_line_character_to_pass, line_length_to_pass, center_header_to_pass, recursive_attempt_to_pass);
                var length_to_use = line_length_to_pass || 80;
                expect(eaiLogger._internalFunctions.debugPoint_Output.calledOnce, 'debugPoint_Output to be called once').to.be.true();
                expect(eaiLogger._internalFunctions.debugPoint_Output.getCall(0).args[0], 'top_line').to.be.a.string().and.to.match(top_line_regex);
                if (_.isPlainObject(message)) {
                    expect(eaiLogger._internalFunctions.debugPoint_Output.getCall(0).args[1], 'message').to.be.an.object().and.to.equal(message);
                }
                else {
                    expect(eaiLogger._internalFunctions.debugPoint_Output.getCall(0).args[1], 'message').to.be.a.string().and.to.equal(message);
                }
                expect(eaiLogger._internalFunctions.debugPoint_Output.getCall(0).args[2], 'bottom_line').to.be.a.string().and.to.have.length(length_to_use).and.to.equal(bottom_line);
                done();

            };
            lab.beforeEach(function (done) {
                sinon.spy(eaiLogger._internalFunctions, 'debugPoint_Output');
                done();
            });
            lab.afterEach(function (done) {
                eaiLogger._internalFunctions.debugPoint_Output.restore();
                done();
            });

            lab.test('invalid parameters - no values passed', function (done) {
                var regex_to_match = /^-{2} \d{2}:\d{2}:\d{2}.\d{3} -{64}$/;
                return validation(done, regex_to_match, 'null', default_line);
            });

            lab.test('debug_message (string)', function (done) {
                var regex_to_match = /^-{2} \d{2}:\d{2}:\d{2}.\d{3} -{64}$/;
                return validation(done, regex_to_match, 'test_this', default_line, 'test_this');
            });
            lab.test('debug_message (object)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var regex_to_match = /^-{2} \d{2}:\d{2}:\d{2}.\d{3} -{64}$/;
                return validation(done, regex_to_match, object_to_log, default_line, object_to_log);
            });

            lab.test('debug_message (object), header', function (done) {
                var object_to_log = {
                    detail: true
                };
                var regex_to_match = /^-{2} \d{2}:\d{2}:\d{2}.\d{3} - test header -{50}$/;
                return validation(done, regex_to_match, object_to_log, default_line, object_to_log, 'test header');
            });

            lab.test('debug_message (object), header, separator_line_character', function (done) {
                var object_to_log = {
                    detail: true
                };
                var separator_line_character = 'Q';
                var q_line = Array(81).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q test header Q{50}$/;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (60)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 60;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q test header Q{30}$/;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character, line_length);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (10)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 10;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q test header $/;

                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character, line_length);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (10), center_header (true)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 10;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q test header $/;
                var center_header = true;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character, line_length, center_header);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (80), center_header (true)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 80;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q{26} test header Q{25}$/;
                var center_header = true;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character, line_length, center_header);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (80), center_header (true)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 80;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q{25} test header2 Q{25}$/;
                var center_header = true;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header2', separator_line_character, line_length, center_header);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (80), center_header (false), recursive_attempt (1)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 80;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q test header Q{50}$/;
                var center_header = false;
                var recursive_attempt = 1;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character, line_length, center_header, recursive_attempt);
            });
            lab.test('debug_message (object), header, separator_line_character, line_length (80), center_header (false), recursive_attempt (2)', function (done) {
                var object_to_log = {
                    detail: true
                };
                var line_length = 80;
                var separator_line_character = 'Q';
                var q_line = Array(line_length + 1).join(separator_line_character);
                var regex_to_match = /^Q{2} \d{2}:\d{2}:\d{2}.\d{3} Q test header Q{50}$/;
                var center_header = false;
                var recursive_attempt = 2;
                return validation(done, regex_to_match, object_to_log, q_line, object_to_log, 'test header', separator_line_character, line_length, center_header, recursive_attempt);
            });
            lab.test('SUPRESS_DEBUG_POINT = true', function (done) {
                process.env.SUPRESS_DEBUG_POINT = 'true';
                var return_value = eaiLogger.debugPoint();
                process.env.SUPRESS_DEBUG_POINT = 'false';
                expect(return_value).to.be.true();
                expect(eaiLogger._internalFunctions.debugPoint_Output.calledOnce, 'debugPoint_Output to be called once').to.be.false();
                done();
            });
        });
        lab.experiment('logValidationError tests', logValidationError_options, function () {
            var check_value_from_request_to_message = function (request_value, message_value, field) {
                if (request_value[field] && Object.keys(request_value[field]).length && _.isPlainObject(request_value[field])) {
                    expect(message_value[field], field).to.be.an.object();
                }
                else {
                    expect(message_value[field], field).to.be.undefined();
                }
            };
            var validation_debugPoint = function (done, method_name_to_pass, request_to_pass, error_to_pass) {
                var return_value = eaiLogger.logValidationError(method_name_to_pass, request_to_pass, error_to_pass);
                expect(return_value, 'returned_date').to.be.a.string().match(date_regex);
                expect(eaiLogger.debugPoint.calledOnce, 'eaiLogger.debugPoint.calledOnce').to.be.true();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce, 'eaiLogger._internalFunctions.logPassthrough.calledOnce').to.be.false();
                var passed_values = eaiLogger.debugPoint.getCall(0).args[0];
                expect(passed_values, 'valued passed to debugPoint').to.be.an.object();
                expect(passed_values.log_point, 'passed_values.log_point').to.be.a.string().and.to.equal('Input Validation Error');
                if (request_to_pass) {
                    check_value_from_request_to_message(request_to_pass, passed_values, 'query');
                    check_value_from_request_to_message(request_to_pass, passed_values, 'params');
                    check_value_from_request_to_message(request_to_pass, passed_values, 'payload');
                }
                else {
                    expect(passed_values.query, 'query').to.be.undefined();
                    expect(passed_values.params, 'params').to.be.undefined();
                    expect(passed_values.payload, 'payload').to.be.undefined();
                }
                if (error_to_pass) {
                    expect(passed_values.error, 'error').to.be.an.object();
                }
                else {
                    expect(passed_values.error, 'error').to.be.undefined();
                }
                done();
            };
            lab.beforeEach(function (done) {
                sinon.spy(eaiLogger, 'debugPoint');
                sinon.spy(eaiLogger._internalFunctions, 'logPassthrough');
                done();
            });
            lab.afterEach(function (done) {
                eaiLogger.debugPoint.restore();
                eaiLogger._internalFunctions.logPassthrough.restore();
                done();
            });

            lab.test('invalid parameters - no values passed', function (done) {
                return validation_debugPoint(done);
            });
            lab.test('SUPRESS_TIMING = true', function (done) {
                process.env.SUPRESS_TIMING = 'true';
                var return_value = eaiLogger.logValidationError();

                process.env.SUPRESS_TIMING = 'false';
                expect(return_value, 'returned date').to.be.null();
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce, 'eaiLogger._internalFunctions.logPassthrough.calledOnce').to.be.false();
                expect(eaiLogger.debugPoint.calledOnce, 'eaiLogger.debugPoint.calledOnce').to.be.false();
                done();
            });
            lab.test('TIMING_AS_DEBUGPOINT = false', function (done) {
                process.env.TIMING_AS_DEBUGPOINT = 'false';
                var return_value = eaiLogger.logValidationError();

                process.env.TIMING_AS_DEBUGPOINT = 'true';
                expect(return_value, 'returned date').to.be.a.string().match(date_regex);
                expect(eaiLogger._internalFunctions.logPassthrough.calledOnce, 'eaiLogger._internalFunctions.logPassthrough.calledOnce').to.be.true();
                expect(eaiLogger._internalFunctions.logPassthrough.getCall(0).args[0]).to.be.a.string().and.to.equal('warn');
                expect(eaiLogger.debugPoint.calledOnce, 'eaiLogger.debugPoint.calledOnce').to.be.false();
                done();
            });

            lab.test('method_name, no request, no error', function (done) {
                return validation_debugPoint(done, 'test name');
            });
            lab.test('method_name, empty request, no error', function (done) {
                var request = {};
                return validation_debugPoint(done, 'test name', request);
            });

            lab.test('method_name, request with query (empty), no error', function (done) {
                var request = {
                    query: {}
                };
                return validation_debugPoint(done, 'test name', request);
            });
            lab.test('method_name, request with query (one value), no error', function (done) {
                var request = {
                    query: {
                        value: true
                    }
                };
                return validation_debugPoint(done, 'test name', request);
            });

            lab.test('method_name, request with params (empty), no error', function (done) {
                var request = {
                    params: {}
                };
                return validation_debugPoint(done, 'test name', request);
            });
            lab.test('method_name, request with params (one value), no error', function (done) {
                var request = {
                    params: {
                        value: true
                    }
                };
                return validation_debugPoint(done, 'test name', request);
            });

            lab.test('method_name, request with payload (empty), no error', function (done) {
                var request = {
                    payload: {}
                };
                return validation_debugPoint(done, 'test name', request);
            });
            lab.test('method_name, request with payload (one value), no error', function (done) {
                var request = {
                    payload: {
                        value: true
                    }
                };
                return validation_debugPoint(done, 'test name', request);
            });
            lab.test('method_name, request with payload (one value) & query (one value) & params (one value), error (empty)', function (done) {
                var request = {
                    payload: {
                        value: true
                    },
                    params: {
                        test: 'sample'
                    },
                    query: {
                        input: 8
                    }
                };
                var error = {};
                return validation_debugPoint(done, 'test name', request, error);
            });
            lab.experiment('Invalid Data Types', function () {
                lab.test('method_name, request with query (type string), no error', function (done) {
                    var request = {
                        query: 'haha'
                    };
                    return validation_debugPoint(done, 'test name', request);
                });
                lab.test('method_name, request with params (type boolean), no error', function (done) {
                    var request = {
                        params: true
                    };
                    return validation_debugPoint(done, 'test name', request);
                });
                lab.test('method_name, request with payload (type number), no error', function (done) {
                    var request = {
                        payload: 7
                    };
                    return validation_debugPoint(done, 'test name', request);
                });
            });

        });
    });

    lab.experiment('extra functional tests', extraFunctionalTests_options, function () {
        lab.test('logMethodDetail followed by logTiming', function (done) {
            var start_time = eaiLogger.logMethodDetail('a', 'b');
            var end_time = eaiLogger.logTiming('a', 'c', start_time);
            expect(start_time).to.be.a.string().and.to.match(date_regex);
            expect(end_time).to.be.a.string().and.to.match(date_regex);
            done();
        });
        lab.test('logMethodDetail followed by logTiming followed by logTiming', function (done) {
            var start_time = eaiLogger.logMethodDetail('a', 'b');
            var end_time = eaiLogger.logTiming('a', 'c', start_time);
            var end_time2 = eaiLogger.logTiming('a', 'c', end_time);
            expect(start_time).to.be.a.string().and.to.match(date_regex);
            expect(end_time).to.be.a.string().and.to.match(date_regex);
            expect(end_time2).to.be.a.string().and.to.match(date_regex);
            done();
        });
    });

    lab.experiment('hapijs plugin', hapijsPlugin_options, function () {

      var plugin = new HapiPlugin();

      var events = {};
      var server = {};

      lab.beforeEach(function (done) {
        sinon.spy(plugin.logger, 'log');
        events = {};
        server = {
          on: (event, handler) => {
            events[event] = handler;
          }
        };
        plugin.register(server, {}, () => {});
        done();
      });

      lab.afterEach(function (done) {
        plugin.logger.log.restore();
        done();
      });

      lab.test('hapi info logs', function (done) {
        events.log({tags:['info']}, {info:true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('hapi warn logs', function (done) {
        events['request-internal']({headers: []}, {tags:['warn']}, {warn:true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('hapi error logs', function (done) {
        events['request-internal']({headers:[]}, {tags:['error']}, {error:true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('hapi debug logs', function (done) {
        events.log({tags:['debug']}, {debug:true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('preserves correlation id header', function (done) {
        var request = {headers: {'x-rdc-prosoft-correlation-id':'abc123'}};
        events['request-internal'](request, {tags:['error']}, {error:true});
        expect(request.headers['x-rdc-prosoft-correlation-id']).to.equal('abc123');
        done();
      });

      lab.test('hapi request logs', function (done) {
        events.request({}, {tags:['info']}, {info: true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('hapi internal error', function (done) {
        events.internalError({}, {tags:['info']}, {info: true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('hapi request error', function (done) {
        events['request-error']({}, {tags:['info']}, {info: true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        done();
      });

      lab.test('omits hapi noise', function (done) {
        events.log({data: {msec: true}, tags:['info']}, {hapi: true, error: true});
        expect(plugin.logger.log.calledOnce).to.be.false();
        done();
      });

      lab.test('omits hapi auth noise', function (done) {
        events.log({tags:['info']}, {hapi: true, error: true, unauthenticated: true});
        expect(plugin.logger.log.calledOnce).to.be.false();
        done();
      });

      lab.test('hapi request-internal logs', function (done) {
        var request = {
          headers: []
        };
        events['request-internal'](request, {tags:['info']}, {info: true});
        expect(plugin.logger.log.calledOnce).to.be.true();
        expect(request.headers['x-rdc-prosoft-correlation-id']).to.be.not.null;
        done();
      });

      lab.test('hapi response logs', function (done) {
        var request = {
          info: {
          },
          raw: {
            req: {
              httpVersion: '1.1'
            }
          },
          method: 'GET',
          url: {
            path: '/'
          },
          headers: {
            referer: 'www.realtor.com'
          },
          response: {
            statusCode: 200
          }
        };

        events.response(request);
        expect(plugin.logger.log.calledOnce).to.be.true();

        done();
      });
    });
    lab.experiment('Suppress Logging tests',function(){
      lab.experiment('suppressed',function(){
        lab.before(function(done){
          process.env.SUPRESS_LOGGING = 'true';
          done();
        });
        lab.after(function(done){
          process.env.SUPRESS_LOGGING = 'false';
          done();
        });
        lab.test('debugPoint_Output', function(done){
          Code.expect(eaiLogger._internalFunctions.debugPoint_Output('passed_header', 'passed_message', 'passed_footer', 0)).to.be.false();
          done();
        });
        lab.test('log', function(done){
          Code.expect(eaiLogger.log('log_level', 'detail', 'correlation_id', 'message')).to.be.false();
          done();
        });
      });
      lab.experiment('NOT suppressed',function(){
        lab.test('debugPoint_Output', function(done){
          Code.expect(eaiLogger._internalFunctions.debugPoint_Output('passed_header', 'passed_message', 'passed_footer', 0)).to.be.true();
          done();
        });
        lab.test('log', function(done){
          Code.expect(eaiLogger.log('info', 'detail', 'correlation_id', 'message')).to.be.true();
          done();
        });
      });
    });
});
